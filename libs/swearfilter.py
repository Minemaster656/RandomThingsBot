import string
def findSwear(string):
    # print(isinstance(string, tuple))
    output=""
    # words = ["банан", "помидор"]

    words=['архипиздрит', 'басран', 'бздение', 'бздеть', 'бздех', 'бзднуть', 'бздун', 'бздунья', 'бздюха', 'бикса', 'блежник', 'блудилище', 'блять', 'блядь', 'хуй', 'ебать', 'блябу', 'блябуду', 'блядун', 'блядунья', 'блядь', 'блядюга', 'взьебка', 'волосянка', 'взьебывать', "вз'ебывать", 'выблядок', 'выблядыш', 'выебать', 'выеть', 'выпердеть', 'высраться', 'выссаться', 'говенка', 'говенный', 'говешка', 'говназия', 'говнецо', 'говно', 'говноед', 'говночист', 'говнюк', 'говнюха', 'говнядина', 'говняк', 'говняный', 'говнять', 'гондон', 'дермо', 'долбоеб', 'дрисня', 'дрист', 'дристать', 'дристануть', 'дристун', 'дристуха', 'дрочена', 'дрочила', 'дрочилка', 'дрочить', 'дрочка', 'ебало', 'ебальник', 'ебануть', 'ебаный', 'ебарь', 'ебатория', 'ебать', 'ебаться', 'ебец', 'ебливый', 'ебля', 'ебнуть', 'ебнуться', 'ебня', 'ебун', 'елда', 'елдак', 'елдачить', 'заговнять', 'задристать', 'задрока', 'заеба', 'заебанец', 'заебать', 'заебаться', 'заебываться', 'заеть', 'залупа', 'залупаться', 'залупить', 'залупиться', 'замудохаться', 'засерун', 'засеря', 'засерать', 'засирать', 'засранец', 'засрун', 'захуячить', 'злоебучий', 'изговнять', 'изговняться', 'кляпыжиться', 'курва', 'курвенок', 'курвин', 'курвяжник', 'курвяжница', 'курвяжный', 'минет', 'минетчик', 'минетчица', 'мокрохвостка', 'мокрощелка', 'мудак', 'муде', 'мудеть', 'мудила', 'мудистый', 'мудня', 'мудоеб', 'мудозвон', 'муйня', 'набздеть', 'наговнять', 'надристать', 'надрочить', 'наебать', 'наебнуться', 'наебывать', 'нассать', 'нахезать', 'нахуйник', 'насцать', 'обдристаться', 'обдристаться', 'обосранец', 'обосрать', 'обосцать', 'обосцаться', 'обсирать', 'опизде', 'отпиздячить', 'отпороть', 'отъеть', 'охуевательский', 'охуевать', 'охуевающий', 'охуеть', 'охуительный', 'охуячивать', 'охуячить', 'педрик', 'пердеж', 'пердение', 'пердеть', 'пердильник', 'перднуть', 'пердун', 'пердунец', 'пердунина', 'пердунья', 'пердуха', 'пердь', 'передок', 'пернуть', 'пидор', 'пизда', 'пиздануть', 'пизденка', 'пиздеть', 'пиздить', 'пиздища', 'пиздобратия', 'пиздоватый', 'пиздорванец', 'пиздорванка', 'пиздострадатель', 'пиздун', 'пиздюга', 'пиздюк', 'пиздячить', 'писять', 'питишка', 'плеха', 'подговнять', 'подъебнуться', 'поебать', 'поебать', 'попысать', 'посрать', 'поставить', 'поцоватый', 'презерватив', 'проблядь', 'проебать', 'промандеть', 'промудеть', 'пропиздеть', 'пропиздячить', 'пысать', 'разъеба', 'разъебай', 'распиздай', 'распиздеться', 'распиздяй', 'распроеть', 'растыка', 'спиздить', 'срака', 'сраный', 'сранье', 'срать', 'срун', 'ссака', 'ссаки', 'ссать', 'старпер', 'струк', 'суходрочка', 'сцавинье', 'сцака', 'сцаки', 'сцание', 'сцать', 'сциха', 'сцуль', 'сцыха', 'сыкун', 'титечка', 'титечный', 'титка', 'титочка', 'титька', 'трипер', 'триппер', 'уеть', 'усраться', 'усцаться', 'фик', 'фуй', 'хезать', 'хер', 'херня', 'херовина', 'херовый', 'хитрожопый', 'хлюха', 'хуевина', 'хуевый', 'хуек', 'хуепромышленник', 'хуерик', 'хуесос', 'хуище', 'хуй', 'хуйня', 'хуйрик', 'хуякать', 'хуякнуть', 'целка', 'шлюха']
    # words+=['бляд', 'манда', 'мандавошка', 'мандей', 'мандеть', 'мандища', 'мандюк', 'сговнять', 'секель', 'серун', 'серька', 'сика', 'сикать', 'сикель', 'сирать', 'сирывать', 'скурвиться', 'скуреха', 'скурея', 'скуряга', 'скуряжничать',]

    # print("Фильтруемые слова:", words)

    #Фраза, которую будем проверять.
    phrase = string.lower().replace(" ", "")#input("Введите фразу для проверки: ")
    # print(isinstance(phrase, tuple))
    def distance(a, b):
        "Calculates the Levenshtein distance between a and b."
        n, m = len(a), len(b)
        if n > m:
            # Make sure n <= m, to use O(min(n, m)) space
            a, b = b, a
            n, m = m, n

        current_row = range(n + 1)  # Keep current and previous row, not entire matrix
        for i in range(1, m + 1):
            previous_row, current_row = current_row, [i] + [0] * n
            for j in range(1, n + 1):
                add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1]
                if a[j - 1] != b[i - 1]:
                    change += 1
                current_row[j] = min(add, delete, change)
        # print(current_row[n])
        return current_row[n]

    d =   {'а' : ['а', 'a', '@'],
      'б' : ['б', '6', 'b'],
      'в' : ['в', 'b', 'v'],
      'г' : ['г', 'r', 'g'],
      'д' : ['д', 'd'],
      'е' : ['е', 'e'],
      'ё' : ['ё', 'e'],
      'ж' : ['ж', 'zh', '*'],
      'з' : ['з', '3', 'z'],
      'и' : ['и', 'u', 'i'],
      'й' : ['й', 'u', 'i'],
      'к' : ['к', 'k', 'i{', '|{'],
      'л' : ['л', 'l', 'ji'],
      'м' : ['м', 'm'],
      'н' : ['н', 'h', 'n'],
      'о' : ['о', 'o', '0'],
      'п' : ['п', 'n', 'p'],
      'р' : ['р', 'r', 'p'],
      'с' : ['с', 'c', 's'],
      'т' : ['т', 'm', 't'],
      'у' : ['у', 'y', 'u'],
      'ф' : ['ф', 'f'],
      'х' : ['х', 'x', 'h' , '}{'],
      'ц' : ['ц', 'c', 'u,'],
      'ч' : ['ч', 'ch'],
      'ш' : ['ш', 'sh'],
      'щ' : ['щ', 'sch'],
      'ь' : ['ь', 'b'],
      'ы' : ['ы', 'bi'],
      'ъ' : ['ъ'],
      'э' : ['э', 'e'],
      'ю' : ['ю', 'io'],
      'я' : ['я', 'ya']
    }

    for key, value in d.items():
        #Проходимся по каждой букве в значении словаря. То есть по вот этим спискам ['а', 'a', '@'].
        for letter in value:
            #Проходимся по каждой букве в нашей фразе.
            for phr in phrase:
                #Если буква совпадает с буквой в нашем списке.
                if letter == phr:
                    #Заменяем эту букву на ключ словаря.
                    phrase = phrase.replace(phr, key)

    #Проходимся по всем словам.
    for word in words:
        #Разбиваем слово на части, и проходимся по ним.
        for part in range(len(phrase)):
            #Вот сам наш фрагмент.
            fragment = phrase[part: part+len(word)]
            #Если отличие этого фрагмента меньше или равно 25% этого слова, то считаем, что они равны.
            # print(fragment, word)
            if distance(fragment, word) <= len(word)*0.25:
                #Если они равны, выводим надпись о их нахождении.
                output+=f"Найдено: {word}\nПохоже на: {fragment}\n"
                # print("CHECK: ", output)
    # print(isinstance(output, tuple), "UOUTUTYTUTYTYUTYRYERUYETRUGBXGHFVDHGFGVDF GVFDGVGYDVGGVDFKYGHGUYDGV")
    return output