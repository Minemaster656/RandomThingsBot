import discord
from discord.ext import commands
from discord import Option

import Data
import utils
from Data import db
import datetime


class Logs(commands.Cog):
    ''' Logs | BOT COG'''
    name = "Logs"
    author = "Minemaster"

    def __init__(self, bot):
        self.bot = bot

    events = ["–í—Ö–æ–¥/–≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ë–∞–Ω—ã",
              "–ö–∞–Ω–∞–ª—ã",
              "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤",
              "–ë–æ—Ç—ã", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"]

    @commands.has_permissions(administrator=True)
    @commands.slash_command(name="–ª–æ–≥–∏-–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", description="description")
    async def configlogs(self, ctx, category: Option(str, description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π", required=True,
                                                     choices=events) = " ",
                         channel: Option(discord.TextChannel, description="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∞", required=True) = 0,
                         mode: Option(str, description="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å", required=True,
                                      choices=["–ü–æ–¥—Ä–æ–±–Ω–æ", "–û—Å–Ω–æ–≤–Ω–æ–µ", "–û—Ç–∫–ª—é—á–∏—Ç—å"]) = " "
                         ):
        doc = db.logscfg.find_one({"id": ctx.guild.id})
        parsedmodes = {"–ü–æ–¥—Ä–æ–±–Ω–æ": 2, "–û—Å–Ω–æ–≤–Ω–æ–µ": 1, "–û—Ç–∫–ª—é—á–∏—Ç—å": 0}
        parsedmode = parsedmodes[mode]
        if doc:
            doc["states"][category] = parsedmode
            doc["channels"][category] = channel.id
            db.logscfg.update_one({"id": ctx.guild.id}, {"$set": doc})
        else:
            default_channels = {}
            default_states = {}
            for k in self.events:
                default_states[k] = 0
                default_channels[k] = 0
            doc = {"id": ctx.guild.id, "states": default_states, "channels": default_channels}
            doc["states"][category] = parsedmode
            doc["channels"][category] = channel.id

            db.logscfg.insert_one(doc)
        embed = discord.Embed(title="–õ–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
                              description=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category}`\n–ö–∞–Ω–∞–ª: <#{channel.id}>\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å: **{mode}**",
                              colour=Data.embedColors["Success"])
        await ctx.respond(embed=embed)

    async def sendLog(self, category, embed):
        ...

    @commands.Cog.listener("on_member_ban")
    async def on_member_ban(self, guild, user):
        doc = db.logscfg.find_one({"id": guild.id})
        if doc:
            channel = guild.get_channel(doc["channels"]["–ë–∞–Ω—ã"])
            state = doc["states"]["–ë–∞–Ω—ã"]
            if channel and state > 0:
                try:
                    hook = await utils.initWebhook(channel, self.bot.user.id)
                    if not hook:
                        return
                    embed = discord.Embed(title="–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                          description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user.name}` –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!",
                                          colour=discord.Colour.red())
                    if isinstance(user, discord.Member):
                        result = ', '.join([f'<@&{role.id}>' for role in user.roles[1:]])
                        output = f'{result}, ' if len(user.roles) > 1 else ''
                        userdata = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É <t:{int(user.joined_at.timestamp())}:R>.\n" \
                                   f"**–†–æ–ª–∏:**{output}"
                    else:
                        userdata = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    embed.add_field(name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value=f"–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω <t:{'AAA'}:R>\n" + userdata
                                    , inline=False)
                    embed.set_footer(text=f"ID: {user.id}")
                    if state > 1:
                        ...
                    await hook.send(avatar_url=Data.webhook_avatar_url, username=f"{self.bot.user.name} | üìö–õ–æ–≥–∏",
                                    embed=embed)


                except:
                    ...

    @commands.Cog.listener("on_member_unban")
    async def on_member_unban(self, guild, user):
        doc = db.logscfg.find_one({"id": guild.id})
        if doc:
            channel = guild.get_channel(doc["channels"]["–ë–∞–Ω—ã"])
            state = doc["states"]["–ë–∞–Ω—ã"]
            if channel and state > 0:
                # try:
                hook = None
                # try:
                hooks = await channel.webhooks()
                hook = None
                for h in hooks:
                    if h.user.id == self.bot.user.id:
                        hook = h
                        break
                if not hook:
                    hook = await channel.create_webhook(name="RTB hook")
                    # return hook
                    # hook=await utils.initWebhook(channel, self.bot.user.id)
                # except:
                #
                #
                #     ...
                # hook = await utils.initWebhook(channel, self.bot.user.id)
                print(hook)
                if not hook:
                    print("NO HOOK")
                    return

                embed = discord.Embed(title="–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                      description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user.name}` –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω!",
                                      colour=discord.Colour.green())
                if isinstance(user, discord.Member):
                    result = ', '.join([f'<@&{role.id}>' for role in user.roles[1:]])
                    output = f'{result}, ' if len(user.roles) > 1 else ''
                    userdata = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É <t:{int(user.joined_at.timestamp())}:R>.\n" \
                               f"**–†–æ–ª–∏:**{output}"
                else:
                    userdata = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                embed.add_field(name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                value=f"–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω <t:{int(user.created_at.timestamp())}:R>\n" + userdata
                                , inline=False)
                embed.set_footer(text=f"ID: {user.id}")
                if state > 1:
                    ...
                await hook.send(avatar_url=Data.webhook_avatar_url, username=f"{self.bot.user.name} | üìö–õ–æ–≥–∏",
                                embed=embed, content="** **")
                print("SENT")

                # except:
                #     ...


def setup(bot):
    bot.add_cog(Logs(bot))
# TODO: –≠–¢–û –ö–£–°–û–ö –ù–ï–†–ê–ë–û–ß–ï–ì–û –ì–û–í–ù–û–ö–û–î–ê. –ï–ì–û –ù–£–ñ–ù–û –°–ñ–ï–ß–¨!!!
