import datetime

import discord
from discord.ext import commands
from discord import Option

from discord import SlashCommandGroup

import d
import utils
from logger import log, LogLevel


class WPG(commands.Cog):
    ''' WPG | BOT COG'''
    name = "WPG"
    author = "Minemaster for Crepil"

    wpg_commands = discord.SlashCommandGroup(
        "–≤–ø–∏", ""

    )
    wpg_masters = [
        723854737497128970,  # crepil
        663010344150499368,  # john
        609348530498437140,  # minemaster
    ]

    def __init__(self, bot: discord.Bot):
        self.bot = bot

    @wpg_commands.command(name="—Å–æ–∑–¥–∞—Ç—å-–≥–æ—Ä–æ–¥", description="–î–æ–±–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    async def add_city(self, ctx: discord.ApplicationContext,
                       owner: Option(discord.Member, description="–ß–µ–π –≥–æ—Ä–æ–¥", required=True),
                       name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", required=True),
                       starting_unemployed: Option(int, description="–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö", required=True),
                       starting_children: Option(int, description="–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", required=True)):
        if not ctx.author.id in self.wpg_masters:
            await ctx.respond("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å.", ephemeral=True)
            await log(
                f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤",
                LogLevel.WARNING)
            return

        collection = d.db.get_collection("wpg_cities")
        scheme = d.Schemes.WPG_city

        same_name = collection.find_one({"city_name": name})
        if same_name:
            await ctx.respond("–ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å!", ephemeral=True)
            await log(
                f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º",
                LogLevel.WARNING)
            return
        doc = d.schema({
            "city_name": name,
            "owner_id": owner.id,
            "unemployed": starting_unemployed,
            "children": starting_children,
            "created_timestamp": datetime.datetime.now().timestamp(),
            "edited_timestamp": datetime.datetime.now().timestamp(),
        }, scheme=scheme)
        collection.insert_one(doc)

        await ctx.respond(f"–ì–æ—Ä–æ–¥ **{name}** —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç <@{owner.id}>!", ephemeral=False)
        await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) —Å–æ–∑–¥–∞–ª –≥–æ—Ä–æ–¥ **{name}**", LogLevel.INFO)

    @wpg_commands.command(name="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å-–≥–æ—Ä–æ–¥", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    async def view_city(self, ctx: discord.ApplicationContext,
                        city_name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", required=True)):
        collection = d.db.get_collection("wpg_cities")

        city = collection.find_one({"city_name": city_name})
        if not city:
            await ctx.respond("–ì–æ—Ä–æ–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!", ephemeral=True)
            await log(
                f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä–æ–¥, –Ω–æ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç: {city_name}",
                LogLevel.WARNING)
            return
        city = d.schema(city, scheme=d.Schemes.WPG_city)
        # print(city)

        if not ctx.author.id in self.wpg_masters:
            await ctx.respond("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å.", ephemeral=True)
            return
        title = f"# {city_name}\n-# UUID: {city['UUID']}\n–û—Å–Ω–æ–≤–∞–Ω <t:{utils.unix_sec2ds_timestamp_number(city['created_timestamp'])}:R>\n–í–ª–∞–¥–µ–ª–µ—Ü: <@{city['owner_id']}>"
        if city["owner_id"] != ctx.author.id:
            await ctx.respond(title, ephemeral=False)
            await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø–æ—Å–º–æ—Ç—Ä–µ–ª —á—É–∂–æ–π –≥–æ—Ä–æ–¥ {city_name}",
                      LogLevel.INFO)
            return
        captures = {
            # resources
            "wood": "ü™µ –î—Ä–µ–≤–µ—Å–∏–Ω–∞",
            "food": "üçñ –ï–¥–∞",
            "iron": "‚õèÔ∏è –ñ–µ–ª–µ–∑–æ",
            "coal": "‚ö´ –£–≥–æ–ª—å",
            "oil": "üõ¢Ô∏è –ù–µ—Ñ—Ç—å",

            # people
            "workers": "üë∑‚Äç‚ôÇÔ∏è –†–∞–±–æ—á–∏–µ",
            "engineers": "üë®‚Äçüè≠ –ò–Ω–∂–µ–Ω–µ—Ä",
            "children": "üë∂ –î–µ—Ç–∏",
            "doctors": "üßë‚Äçüî¨ –î–æ–∫—Ç–æ—Ä–∞",
            "unemployed": "ü´É –ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–µ",
            "dead": "üíÄ –¢—Ä—É–ø—ã",
            "sick": "üë≥ –ë–æ–ª—å–Ω—ã–µ",

            # stats
            "hate": "üîª –ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ",  # –Ω–∞ —Å–≤–µ—Ä–∂–µ–Ω–∏–µ
            "hope": "üî∑ –ù–∞–¥–µ–∂–¥–∞",  # –ë–£–ù–î!!!
            "outposts": "üèïÔ∏è –ê–≤–∞–Ω–ø–æ—Å—Ç—ã",
        }
        fields_queue = ["# –†–µ—Å—É—Ä—Å—ã", "wood", "food", "iron", "coal", "oil",
                        "# –õ—é–¥–∏", "workers", "engineers", "children", "doctors", "unemployed", "dead", "sick",
                        "# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "hate", "hope", "outposts"]
        title += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: <t:{utils.unix_sec2ds_timestamp_number(city['edited_timestamp'])}:R>\n"
        for field in fields_queue:
            if field.startswith("#"):
                title += f"{field}\n"
            elif field in city:
                title += f"{captures[field]}: {city[field]}\n"
        await ctx.respond(title, ephemeral=False)
        await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≥–æ—Ä–æ–¥ {city_name}", LogLevel.INFO)

    @wpg_commands.command(name="—É–¥–∞–ª–∏—Ç—å-–≥–æ—Ä–æ–¥", description="–£–¥–∞–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    async def delete_city(self, ctx: discord.ApplicationContext,
                          city_name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", required=True)):
        await ctx.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", ephemeral=True)
        await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ {city_name}, "
                  f"–Ω–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", LogLevel.WARNING)

    #     if not ctx.author.id in self.wpg_masters:
    #         await ctx.respond("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å.", ephemeral=True)
    #         return
    #     city = self.collection.find_one({"city_name": city_name})
    #     if not city:
    #         await ctx.respond("–ì–æ—Ä–æ–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!", ephemeral=True)
    #         return
    #     self.collection.delete_one({"city_name": city_name})
    #     await ctx.respond(f"–ì–æ—Ä–æ–¥ **{city_name}** —É–¥–∞–ª–µ–Ω!", ephemeral=True)

    @wpg_commands.command(name="–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å-–≥–æ—Ä–æ–¥", description="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥")
    async def rename_city(self, ctx: discord.ApplicationContext,
                          name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", required=True),
                          new_name: Option(str, description="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", required=True)):
        await ctx.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", ephemeral=True)
        await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –±—ã –≥–æ—Ä–æ–¥ {name} –≤ {new_name}, –Ω–æ —É–≤—ã –∏ –∞—Ö, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", LogLevel.WARNING)

    @wpg_commands.command(name="–ø–µ—Ä–µ–¥–∞—Ç—å-–≥–æ—Ä–æ–¥", description="–ü–µ—Ä–µ–¥–∞–µ—Ç –≥–æ—Ä–æ–¥ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É")
    async def transfer_city(self, ctx: discord.ApplicationContext,
                            name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", required=True),
                            new_owner: Option(discord.Member, description="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", required=True)):
        await ctx.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", ephemeral=True)
        await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø–µ—Ä–µ–¥–∞–ª –±—ã –≥–æ—Ä–æ–¥ {name} –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É {new_owner}, –Ω–æ —É–≤—ã –∏ –∞—Ö, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", LogLevel.WARNING)

    @wpg_commands.command(name="–∏–∑–º–µ–Ω–∏—Ç—å-—Å—Ç–∞—Ç—ã", description="–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—ã –≥–æ—Ä–æ–¥–∞")
    async def edit_city_stats(self, ctx: discord.ApplicationContext,
                              name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", required=True),
                              field: Option(str, description="–ü–æ–ª–µ", choices=["wood", "food", "iron", "coal", "oil",
                                                                              "workers", "engineers", "children",
                                                                              "doctors", "unemployed", "dead", "sick",
                                                                              "hate", "hope", "outposts"],
                                            required=True), value: Option(int, description="–ó–Ω–∞—á–µ–Ω–∏–µ", required=True),
                              mode: Option(str, description="–†–µ–∂–∏–º", choices=["+", "-", "="], required=True)):
        # await ctx.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", ephemeral=True)
        if not ctx.author.id in self.wpg_masters:
            await ctx.respond("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å.", ephemeral=True)
            await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ {name}, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", LogLevel.WARNING)
            return
        collection = d.db.get_collection("wpg_cities")
        city = collection.find_one({"city_name": name})
        if not city:
            await ctx.respond("–ì–æ—Ä–æ–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!", ephemeral=True)
            await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ {name}, –Ω–æ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç!", LogLevel.WARNING)
            return
        city = d.schema(city, d.Schemes.WPG_city)
        starting_value = city[field]
        if mode == "+":
            city[field] += value
        elif mode == "-":
            city[field] -= value
        elif mode == "=":
            city[field] = value
        city["edited_timestamp"] = datetime.datetime.now().timestamp()
        collection.update_one({"city_name": name}, {"$set": city})
        await ctx.respond(
            f"–°—Ç–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ **{name}** –∏–∑–º–µ–Ω–µ–Ω—ã: {field} {mode} {value} ({starting_value} -> {city[field]})",
            ephemeral=False)
        await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ {name}: {field} {mode} {value} ({starting_value} -> {city[field]})", LogLevel.INFO)

    @wpg_commands.command(name="–º–æ–∏-–≥–æ—Ä–æ–¥–∞", description="–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤")
    async def my_cities(self, ctx: discord.ApplicationContext):
        collection = d.db.get_collection("wpg_cities")
        cities = collection.find({"owner_id": ctx.author.id})
        if not cities:
            await ctx.respond("–£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤!", ephemeral=True)
            await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤!", LogLevel.WARNING)
            return
        message = "–í–∞—à–∏ –≥–æ—Ä–æ–¥–∞:\n"
        for city in cities:
            message += f"{city['city_name']} –æ—Å–Ω–æ–≤–∞–Ω <t:{utils.unix_sec2ds_timestamp_number(city['created_timestamp'])}:R>\n"
        await ctx.respond(message, ephemeral=True)
        await log(f"{ctx.author.name} ({ctx.author.id}) (GUILD: {ctx.guild.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤", LogLevel.INFO)

    @wpg_commands.command(name="–≥–æ—Ä–æ–¥–∞-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", description="–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def user_cities(self, ctx: discord.ApplicationContext,
                          user: Option(discord.Member, description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", required=True)):
        collection = d.db.get_collection("wpg_cities")
        cities = collection.find({"owner_id": user.id})
        if not cities:
            await ctx.respond("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –≥–æ—Ä–æ–¥–æ–≤!", ephemeral=True)
            await log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} ({user.id}) (GUILD: {ctx.guild.id}) –ø—ã—Ç–∞–ª—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ {user.name} ({user.id}), –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤!", LogLevel.WARNING)
            return
        message = f"–ì–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention}:\n"
        for city in cities:
            message += f"{city['city_name']} –æ—Å–Ω–æ–≤–∞–Ω <t:{utils.unix_sec2ds_timestamp_number(city['created_timestamp'])}:R>\n"
        await ctx.respond(message, ephemeral=False)


        await log(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} ({user.id}) (GUILD: {ctx.guild.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ {user.name} ({user.id})",
            LogLevel.INFO)


def setup(bot):
    bot.add_cog(WPG(bot))
