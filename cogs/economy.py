import random
import random as rd
import time

import numpy as np
import matplotlib.pyplot as plt

try:
    import discord
    from discord import Option, Webhook, Forbidden
    from discord.ext import commands
except:
    import pycord as discord
    from pycord import Option, Webhook, Forbidden
    from discord.ext import commands

import perlin_noise

from random import *

import Data
import d
from Data import db
import utils
from Data import cursor
from Data import conn


class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    cmds = discord.SlashCommandGroup(
        "—ç–∫–æ–Ω–æ–º–∏–∫–∞",
        "",

    )

    @commands.slash_command(name="–±–∞–ª–∞–Ω—Å", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–∞—à –±–∞–ª–∞–Ω—Å –∏–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def balance(self, ctx, member: Option(discord.Member, description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", required=False) = None):
        with ctx.typing():
            if member is None:
                member = ctx.author

            data = db.users.find_one({"userid": member.id})
            if not data:
                Data.writeUserToDB(member.id, member.name)
                data = db.users.find_one({"userid": member.id})
                # data['money'] = 0
                # data['money_bank'] = 0
            # data = (0,0)

            embed = discord.Embed(title="–ë–∞–ª–∞–Ω—Å", description=f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{member.id}>:"
                                  , colour=Data.embedColors["Economy"])
            embed.add_field(name="–ë–∞–ª–∞–Ω—Å –Ω–∞ —Ä—É–∫–∞—Ö", value=f"{data['money']}")
            embed.add_field(name="–ë–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ", value=f"{data['money_bank']}")

            await ctx.respond(embed=embed)

    @cmds.command(name="–∑–∞—Ä–∞–±–æ—Ç–æ–∫", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ")
    async def howToMakeMoney(self, ctx):
        embed = discord.Embed(title="–°–ø–æ—Å–æ–±—ã –ø–æ–¥–Ω—è—Ç—å –±–∞–±–ª–∞",
                              description=f"–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ—é—Ç –æ—Ç–∫–∞—Ç, –∞ —á—Ç–æ –±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å API –¥–∏—Å–∫–æ—Ä–¥–∞ —Å–ø–∏—Å–∫–æ–º –∏–∑ –¥–µ—Å—è—Ç–∫–æ–≤ /-–∫–æ–º–∞–Ω–¥, —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö —Å –ø—Ä–µ—Ñ—Ñ–∏–∫—Å–æ–º –±–æ—Ç–∞."
                                          f""
                                          f""
                                          f"")
        embed.add_field(name=f"{Data.preffix}–∏—Å–∫–∞—Ç—å–î–µ–Ω—å–≥–∏",
                        value="–î–∞—ë—Ç –≤–∞–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω—è–∫. –ö–î —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.")
        embed.add_field(name=f"{Data.preffix}–∫–∞–∑–∏–Ω–æ",
                        value="–ö–ê–ó–ò–ù–û!!! –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ —Å —à–∞–Ω—Å–æ–º *50%* –ø–æ–ª—É—á–∏—Ç–µ –µ—ë –≤ —É–¥–≤–æ–µ–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ, –Ω—É –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–π—Ç–µ. –ö–î —Ä–∞–∑ –≤ 10 —Å–µ–∫.")
        await ctx.respond(embed=embed)

    @commands.command(aliases=["–∏—Å–∫–∞—Ç—å–î–µ–Ω—å–≥–∏"])
    @commands.cooldown(1, 60, commands.BucketType.user)
    async def findMoney(self, ctx):

        # rand = rd.randint(0, utils.throwDice(ctx.author.id, ctx.author.name))
        rand = utils.throwDice(ctx.author.id, ctx.author.name)

        db.users.update_one({"userid": ctx.author.id}, {"$inc": {"money": rand}})
        await ctx.send(f"–ü–æ–ª—É—á–µ–Ω–æ **{rand}{Data.currency}**")

    @commands.command(aliases=["–∫–∞–∑–∏–Ω–æ"])
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def casino(self, ctx,value:int):

        # rand = rd.randint(0, utils.throwDice(ctx.author.id, ctx.author.name))
        # rand = utils.throwDice(ctx.author.id, ctx.author.name)
        user = d.getUser(ctx.author.id, ctx.author.name)
        if user['money'] >= value:
            isWin = random.randint(0, 100) < 50
            db.users.update_one({"userid": ctx.author.id}, {"$inc": {"money": value * 1 if isWin else value * -1}})
            if isWin:
                await ctx.send(f"üí∏ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{value}**{Data.currency}!")
            else:
                await ctx.send(f"üß® –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ **{value}**{Data.currency}!")
        else:
            await ctx.send(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç **{value - user['money']}**{Data.currency}!")


    @cmds.command(name="–ª–∏–¥–µ—Ä—ã", description="–õ–∏–¥–µ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏")
    async def ec_leaders(self, ctx):
        leaderCount = 10
        result = db.users.find().sort([("money", -1), ("money_bank", -1)]).limit(leaderCount)
        out = ""
        it = 0
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        embed = discord.Embed(title="–õ–∏–¥–µ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏", description="–¢–æ–ø-10 –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ",
                              colour=Data.embedColors["Economy"])

        for row in result:
            # out +=f"`{it}`. @{row[0]} {row[1]}{Data.currency}:moneybag: + {row[2]}{Data.currency}:bank:. –ò —Ç–æ–≥–æ {row[1]+row[2]}{Data.currency}\n"
            embed.add_field(name=f"`{it + 1}`. @{row['username']}",
                            value=f"{row['money'] + row['money_bank']}{Data.currency}", inline=False)
            it += 1

        await ctx.respond(embed=embed)

    @cmds.command(name="–ø–µ—Ä–µ–≤–æ–¥-–¥–µ–Ω–µ–≥", description="–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –¥–µ–Ω—å–≥–∏")
    async def pay(self, ctx, member: Option(discord.Member, description="–ö–æ–º—É –ø–µ—Ä–µ—Å–ª–∞—Ç—å?", required=True) = None,
                  value: Option(int, description="–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å?", required=True) = 0):
        user_sender = d.getUser(ctx.author.id, ctx.author.name)
        user_receiver = d.getUser(member.id, member.name)
        if user_sender["money"] < value:
            await ctx.respond(f"–í–∞–º –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç {round(value - user_sender['money'],2)}{Data.currency}!")
        else:
            db.users.update_one({"userid": ctx.author.id}, {"$inc": {"money": -value}})
            db.users.update_one({"userid": member.id}, {"$inc": {"money": value}})
            await ctx.respond(f"–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {value}{Data.currency} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}!")

    # @cmds.command(name="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–ø—Ä–µ–¥–º–µ—Ç–∞", description="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ.")
    async def registerItem(self, ctx, name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", required=True) = " ",
                           description: Option(str, description="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", required=True) = " ",
                           id: Option(str, description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞", required=True) = " ",
                           type: Option(str, description="–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞", required=True) = " ",
                           base_price: Option(float, description="–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞", required=True) = 0,
                           dynamic_price: Option(bool, description="–ò–∑–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ–∫—É–ø–æ–∫",
                                                 required=False) = False,
                           owner: Option(str, description="ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∏–∑–Ω–µ—Å–∞", required=True) = ""

                           ):

        # buisness = db.buisnesses.find_one({"id":owner})
        if await Data.parsePermissionFromUser(ctx.author.id, "root") or Data.parsePermissionFromUser(ctx.author.id,
                                                                                                     "edit_economy"):

            buisness = True
            if buisness:
                doc = {
                    "id": id, "type": type, "base_price": base_price, "dynamic_price": dynamic_price,
                    "price": base_price, "owner": owner,
                    "timestamp": int(time.time() / 1000), "creator": ctx.author.id, "purchased": 0, "name": name,
                    "description": description, "quality": 0
                }
                db.items.insert_one(doc)
            else:
                embed = discord.Embed(title="–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", description=f"–ë–∏–∑–Ω–µ—Å—Å {owner} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                                      colour=Data.embedColors["Error"])
                await ctx.respond(embed=embed)
        else:
            await ctx.respond("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏!", ephemeral=True)

    # @cmds.command(name="–æ—Å–º–æ—Ç—Ä–µ—Ç—å-–ø—Ä–µ–¥–º–µ—Ç",description="–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ")
    # async def inspect_item(self, ctx, id : Option(str, description="ID –ø—Ä–µ–¥–º–µ—Ç–∞", required=True)=" "):
    #     # doc = db.items.find({"id":id})
    #     if doc:
    #         await ctx.respond(doc)
    #     else:
    #         await ctx.respond(f"–ü—Ä–µ–¥–º–µ—Ç {id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    # @cmds.command(name="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–±–∏–∑–Ω–µ—Å–∞",description="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∏–∑–Ω–µ—Å.")
    async def registerBuisness(self, ctx, name: Option(str, description="–ù–∞–∑–≤–∞–Ω–∏–µ", required=True) = " ",
                               id: Option(str, description="ID", required=True) = " "
                               , link: Option(str, description="–°–∞–π—Ç –±–∏–∑–Ω–µ—Å–∞", required=False) = " ",
                               server: Option(str, description="–°–µ—Ä–≤–µ—Ä –±–∏–∑–Ω–µ—Å–∞", required=False) = " ",
                               logo: Option(str, description="–õ–æ–≥–æ—Ç–∏–ø –±–∏–∑–Ω–µ—Å—Å–∞ (—Å—Å—ã–ª–∫–∞)", required=True) = " ",
                               owner: Option(discord.Member, description="–í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞", required=True) = 0):
        if await Data.parsePermissionFromUser(ctx.author.id, "root") or await Data.parsePermissionFromUser(
                ctx.author.id, "edit_economy"):
            res = db.buisnesses.find_one({"id": id})
            if res:
                await ctx.respond("ID –Ω–µ —É–Ω–∏–∫–∞–ª–µ–Ω!")
            else:
                delivers = {}
                doc = {
                    "name": name, "id": id, "link": link, "server": server, "logo": logo, "owner": owner.id,
                    "timestamp": int(time.time() / 1000), "creator": ctx.author.id, "delivers": delivers,
                    "employee": {f"{owner.id}": 0}, "items": [], "money_last": 0, "money": 0,
                    "storage": {}, "tech": 0

                }
        else:
            ...
        # TODO: –ø–µ—Ä–∫–∏ –∏ –ø—Ä–æ–∫–∞—á–∫–∞, —Ä–µ—à–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω–∏–∫–∏


def setup(bot):
    bot.add_cog(Economy(bot))
