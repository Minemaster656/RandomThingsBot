import datetime
import hashlib
import time

# try:
import discord
from discord import Option, Webhook, Forbidden
from discord.ext import commands
# except:
#     import pycord as discord
#     from pycord import Option, Webhook, Forbidden
#     from discord.ext import commands

import AIIO
import Data
import d
import utils
from Data import db, EmbedColor


class ForDevelopement(commands.Cog):
    ''' ForDevelopement | BOT COG'''
    name = "ForDevelopement"
    author = ""

    def __init__(self, bot):
        self.bot = bot

    def makeIdeaEmbed(self, doc):
        '''–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–¥–µ–µ–π, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è MongoDB, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–±–µ–¥'''
        colors = {
            "–≠—Ç–æ—Ç –±–æ—Ç": Data.getEmbedColor(EmbedColor.Neutral),
            "–ù–∞—à —Å–∞–π—Ç": Data.getEmbedColor(EmbedColor.Warp),
            "–ó–∞–±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏—Ç—å –∫–æ–≥–æ-–ª–∏–±–æ –≤ –±–æ—Ç–µ": Data.getEmbedColor(EmbedColor.Error)
        }
        embed = discord.Embed(title=f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {doc['author']}", description=f"{doc['content']}",
                              colour=colors[doc['category']])

        embed.set_footer(
            text=f"ID: {doc['authorid']} | {doc['category']} | –°–µ—Ä–≤–µ—Ä: {doc['guildid']} | –•—ç—à: {doc['hash']}")
        # embed.timestamp=doc["timestamp"]
        return embed

    @commands.cooldown(1, 60, commands.BucketType.user)
    @commands.slash_command(name="–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å-–∏–¥–µ—é",
                            description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—à—É —á—É–¥–µ—Å–Ω—É—é –∏–¥–µ—é –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –±–æ—Ç–∞ –∏–ª–∏ —Å–∞–π—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
    async def addIdea(self, ctx,
                      idea: Option(str, description="–í–∞—à–∞ –∏–¥–µ—è. \n –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ç–∫–∞.",
                                   required=True) = " ",
                      category: Option(str,
                                       description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–ª—è –±–∞–Ω–æ–≤ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–∞.",
                                       choices=[
                                           '–≠—Ç–æ—Ç –±–æ—Ç', '–ù–∞—à —Å–∞–π—Ç', '–ó–∞–±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏—Ç—å –∫–æ–≥–æ-–ª–∏–±–æ –≤ –±–æ—Ç–µ'
                                       ], required=True) = " "):
        user = Data.writeUserToDB(ctx.author.id, ctx.author.name)
        user = d.schema(user, d.Schemes.user)
        db.users.update_one({"userid": ctx.author.id}, {"$set": user})
        if user['banned'] > 0:
            embed = discord.Embed(title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!",
                                  description=f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ!\n{'–ë–æ–ª–µ–µ —Ç–æ–≥–æ, –≤—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–ø–∞—Å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!' if user['banned'] > 1 else ''}",
                                  colour=Data.embedColors["Error"])
            await ctx.respond(embed=embed)
            return
        doc = db.ideas.find_one({"hash": utils.md5(idea)})
        if doc:
            await ctx.respond("–¢–∞–∫–∞—è –∏–¥–µ—è —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!!!", ephemeral=True)
            return
        doc = {
            'author': ctx.author.name,
            'authorid': ctx.author.id,
            'category': category,
            'content': idea,
            # 'timestamp':int(time.time()/1000),
            'guildid': ctx.guild.id,
            'hash': utils.md5(idea)
        }
        db.ideas.insert_one(doc)
        embed = self.makeIdeaEmbed(doc)
        await ctx.respond(
            "–ï—Å–ª–∏ –í–∞—à—É –∏–¥–µ—é –æ–¥–æ–±—Ä—è—Ç, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø—ã—Ç, –µ—Å–ª–∏ –∂–µ –æ—Ç–∫–ª–æ–Ω—è—Ç, –í—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç.–ü—Ä–æ—Å—å–±–∞ –Ω–µ —Å–ø–∞–º–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–µ—Å—Å–º—ã—Å–ª–∏—Ü—É.",
            embed=embed)
        guild = self.bot.get_guild(Data.team_server_id)
        if guild is None:
            found = False
        else:
            channel = guild.get_channel(Data.ideasChannel)
            message = f"# –ù–æ–≤–∞—è –∏–¥–µ—è!!!\n–°–µ—Ä–≤–µ—Ä: {ctx.guild.name} (`{ctx.guild.id}`)\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ctx.author.name} (`{ctx.author.id}`)\n–ö–∞–Ω–∞–ª: {ctx.channel.name} (`{ctx.channel.id}`)"

            await channel.send(message, embed=embed)

    @commands.slash_command(name="—Å–ª—É—á–∞–π–Ω–∞—è-–∏–¥–µ—è", description="–í—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é")
    async def getRandomIdea(self, ctx):
        # pipeline = [{"$sample": {"size": 1}}]
        # random_document = list(db.ideas.aggregate(pipeline))
        rdocs = db.ideas.aggregate([{"$sample": {"size": 1}}])

        random_document = next(rdocs, None)
        if not random_document:
            await ctx.respond("–ò–¥–µ–π –Ω–µ—Ç. –ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Å –ø–æ–º–æ—â—å—é /–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å-–∏–¥–µ—é")
            return
        await ctx.respond(embed=self.makeIdeaEmbed(random_document))

    @commands.slash_command(name="—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å-–∏–¥–µ—é", description="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–¥–µ—é. üöß –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞.", guilds=Data.BOT_INTERNAL_COMMANDS_GUILDS)
    async def checkIdea(self, ctx, hash: Option(str, description="–•—ç—à –∏–¥–µ–∏", required=True) = "",
                        xp: Option(float, description="–°–∫–æ–ª—å–∫–æ –æ–ø—ã—Ç–∞ –≤—ã–¥–∞—Ç—å?", required=True) = 25,
                        dest: Option(str, description="–û–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                     choices=["–û–¥–æ–±—Ä–∏—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å"], required=True) = " "):
        idea = db.ideas.find_one({'hash': hash})
        if not ctx.author.id in Data.devs:
            await ctx.respond("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –±–æ—Ç–∞!", ephemeral=True)
            return
        if idea:

            new_data = {
                '$set': {
                    'checkedat': int(time.time() / 1000),
                    'checker': ctx.author.id
                }
            }
            db.ideas.update_one({'_id': idea['_id']}, new_data)

            # –ü–µ—Ä–µ–Ω–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –¥—Ä—É–≥—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            if dest == "–û–¥–æ–±—Ä–∏—Ç—å":
                db.ideasApproved.insert_one(idea)

            # –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'ideas'
            db.ideas.delete_one({'_id': idea['_id']})
            db.users.update_one({"userid": idea["authorid"]}, {"$inc": {"xp": xp}})
            user = self.bot.get_user(idea["authorid"])
            await ctx.respond("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)

            if user is None:
                user = await self.bot.fetch_user(self.user_id)

            if user:
                await user.send(f"# –ü—Ä–∏–≤–µ—Ç!\n"
                                f"–¢–≤–æ—é –∏–¥–µ—é **{'–æ–¥–æ–±—Ä–∏–ª–∏' if dest == '–û–¥–æ–±—Ä–∏—Ç—å' else '–æ—Ç–∫–ª–æ–Ω–∏–ª–∏'}**\n"
                                f"–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{xp}** –æ–ø—ã—Ç–∞."
                                f"–¢–≤–æ—è –∏–¥–µ—è:", embed=self.makeIdeaEmbed(idea))

        else:
            await ctx.respond(f"–ò–¥–µ—è {hash} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    @commands.slash_command(name="–∑–∞–±–∞–Ω–∏—Ç—å-—Ä–∞–∑–±–∞–Ω–∏—Ç—å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            description="–ë–∞–Ω–∏—Ç –∏–ª–∏ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–û–¢–ï. üöß –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞.", guilds=Data.BOT_INTERNAL_COMMANDS_GUILDS)
    async def banOrUnbanUser(self, ctx, id: Option(str, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required=True) = "",
                             state: Option(str, description="",
                                           choices=["–†–∞–∑–±–∞–Ω–∏—Ç—å", "–ó–∞–±–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ—Å—Ç—É–ø—ã", "–ó–∞–±–∞–Ω–∏—Ç—å –≤ –±–æ—Ç–µ"],
                                           required=True) = ""):
        try:
            id = int(id)
        except:
            await ctx.respond("–ù–µ–≤–µ—Ä–Ω—ã–π ID!", ephemeral=True)
            return
        states = {"–†–∞–∑–±–∞–Ω–∏—Ç—å": 0, "–ó–∞–±–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ—Å—Ç—É–ø—ã": 1, "–ó–∞–±–∞–Ω–∏—Ç—å –≤ –±–æ—Ç–µ": 2}
        user = self.bot.get_user(id)

        if user is None:
            user = await self.bot.fetch_user(self.user_id)
        doc = Data.writeUserToDB(id, user.name)
        if not await Data.parsePermissionFromUser(ctx.author.id, "root"):
            await ctx.respond("–£ –í–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ!!!", ephemeral=True)
            return
        if doc:
            doc['banned'] = states[state]
            if doc['banned'] > 0:
                doc['permissions'] = None
            await ctx.respond("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)
            db.users.update_one({"userid": id}, {"$set": doc})

            if user:
                message = ""
                if states[state] == 0:
                    message += "# –¢–µ–±—è —Ä–∞–∑–±–∞–Ω–∏–ª–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ!"
                elif states[state] == 1:
                    message += "# –¢–µ–±–µ –∑–∞–±–∞–Ω–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ —ç—Ç–æ–º –±–æ—Ç–µ!"
                    message += "\n–¢–∞–∫ –∂–µ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± –æ–ø–∞—Å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, —Å–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–∏—Ç –æ —Ç–µ–±–µ!"
                else:
                    message += "# –¢–µ–±—è –∑–∞–±–∞–Ω–∏–ª–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ!"
                    message += "\n–¢–∞–∫ –∂–µ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± –æ–ø–∞—Å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, —Å–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–∏—Ç –æ —Ç–µ–±–µ!"

                await user.send(message)
        else:
            await ctx.respond("–ù–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)


def setup(bot):
    bot.add_cog(ForDevelopement(bot))
