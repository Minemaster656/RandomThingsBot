import io
import json
import random
import re

import aiohttp
# import numpy as np
# import matplotlib.pyplot as plt
import discord
from discord.ext import commands
# import perlin_noise
from discord import Option
from random import *

import AIIO
# import sqlite3

import Data
import d
import utils

from Data import db
from PIL import Image, ImageFilter, ImageDraw, ImageOps
import pymongo


# from main import cursor
# from main import conn

class ConfirmGenArt(discord.ui.View):
    def __init__(self, character_registerer, prompt):
        super().__init__()

        self.character_registerer = character_registerer
        self.prompt = prompt

    @discord.ui.button(label="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", style=discord.ButtonStyle.green)
    async def confirm_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.edit_message(content="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", view=None)

        gen = await AIIO.askT2I(self.prompt, AIIO.Text2Imgs.KANDINSKY)
        if gen:
            file = AIIO.kandinskyOutputToFile(gen)
            await interaction.guild.get_channel(interaction.channel_id).send(
                f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è `{self.prompt}` –ø–æ –∑–∞–ø—Ä–æ—Å—É {self.character_registerer.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –ª–∏—á–∫–µ —Å —ç—Ç–∏–º –±–æ—Ç–æ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å—Å—ã–ª–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä—Ç–∞. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Å –ø–æ–º–æ—â—å—é `{Data.preffix}–∫–∞–Ω–¥–∏–Ω—Å–∫–∏–π {self.prompt}`!",
                file=file)
            await interaction.response.edit_message(content="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", view=None)
        else:
            await interaction.guild.get_channel(interaction.channel_id).send("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")

        self.stop()

    @discord.ui.button(label="–û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.red)
    async def cancel_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.edit_message(content="–û—Ç–º–µ–Ω–µ–Ω–æ.", view=None)

        self.stop()


class RemoveCharView(discord.ui.View):
    def __init__(self, author, id, timeout=180):
        super().__init__(timeout=timeout)
        self.author = author
        self.id = id

    @discord.ui.button(label="–£–¥–∞–ª–∏—Ç—å", row=0, style=discord.ButtonStyle.danger, emoji="üöÆ")
    async def first_button_callback(self, button, interaction):
        db.characters.delete_one({"id": self.id})
        await interaction.response.send_message(f"–£–¥–∞–ª—ë–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ ``{self.id}``!")
        # self.disable_all_items()
        # await interaction.response.edit_message(view=self)

    @discord.ui.button(label="–û—Ç–º–µ–Ω–∞", row=0, style=discord.ButtonStyle.green, emoji="‚èπ")
    async def second_button_callback(self, button, interaction):
        await interaction.response.send_message(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ``{self.id}`` –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        # self.disable_all_items()
        #
        # await interaction.response.edit_message(view=self)

    async def interaction_check(self, interaction: discord.Interaction):
        return interaction.user.id == self.author.id


class SelectBlankScheme(discord.ui.View):

    @discord.ui.select(  # the decorator that lets you specify the properties of the select menu
        placeholder="Choose a Flavor!",  # the placeholder text that will be displayed if nothing is selected
        min_values=1,  # the minimum number of values that must be selected by the users
        max_values=1,  # the maximum number of values that can be selected by the users
        options=[  # the list of options from which users can choose, a required field
            discord.SelectOption(
                label="ATK 3",
                description=""
            ),
            discord.SelectOption(
                label="–°–ø–∏—Å–æ–∫ –º–∞–∫–µ—Ç–æ–≤",
                description="–î–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –º–∞–∫–µ—Ç–æ–≤."
            ),
            discord.SelectOption(
                label="–†—É–∏–Ω—ã",
                description=""
            )
        ]
    )
    async def select_callback(self, select,
                              interaction):  # the function called when the user is done selecting options
        # await interaction.response.send_message(f"Awesome! I like {select.values[0]} too!")
        if select.values[0] == "–°–ø–∏—Å–æ–∫ –º–∞–∫–µ—Ç–æ–≤":
            embed = discord.Embed(title="–°–ø–∏—Å–æ–∫ –º–∞–∫–µ—Ç–æ–≤ –∞–Ω–∫–µ—Ç", description="–°–ø–∏—Å–æ–∫ –º–∞–∫–µ—Ç–æ–≤", colour=0xffffff)
            embed.add_field(name="–ê–¢–ö", value='''1. –ò–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–≤—Ç–æ—Ä–æ–µ –∏ —Ç–µ–º –±–æ–ª–µ–µ —Ç—Ä–µ—Ç—å–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é)
–í–æ–∑—Ä–∞—Å—Ç, —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, —Ä–æ—Å—Ç, –≤–µ—Å, —Ä–æ–¥–Ω–æ–π –º–∏—Ä
–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
–°–ª–∞–±–æ—Å—Ç–∏
–•–∞—Ä–∞–∫—Ç–µ—Ä
–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
–ë–∏–æ–≥—Ä–∞—Ñ–∏—è
–í–Ω–µ—à–Ω–æ—Å—Ç—å. –ú–æ–∂–Ω–æ —Å –∞—Ä—Ç–æ–º.
–°–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω—É–∂–Ω–æ, –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.''',
                            inline=False)
            await interaction.response.send_message(embed=embed, ephemeral=True)


class RP(commands.Cog):
    result = db.countries.find({}, {"id": 1})  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "countries"
    choicesEditWPG = [str(value["id"]) for value in
                      result]  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ choices –∞—Ä–≥—É–º–µ–Ω—Ç

    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="–¥–≤–∞–¥—Ü–∞—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫", description="–ë—Ä–æ—Å–∏—Ç—å –¥–≤–∞–¥—Ü–∞—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫ —É–¥–∞—á–∏")
    async def dice(self, ctx, user: Option(discord.Member, description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥—ë—Ç –±—Ä–æ—Å–æ–∫",
                                           required=False) = None):
        author = user if user else ctx.author
        user_data = db.users.find_one({"userid": author.id})
        if user_data:
            karma = user_data.get("karma", 0)
            luck = user_data.get("luck", 0)
        else:
            # db.users.insert_one({"userid": author.id, "karma": 0, "luck": 0})
            Data.writeUserToDB(ctx.author.id, ctx.author.name)
            karma = 0
            luck = 0

        def makeThrow():
            def genRandom():
                o = randint(1, 20) + luck
                if o > 20:
                    o = 20
                if o < 1:
                    o = 1
                return o

            out = genRandom()

            if karma < -1 and out > 10:
                out = genRandom()
            if karma > 1 and out < 10:
                out = genRandom()
            return out

        await ctx.respond(f"–ù–∞ –¥–≤–∞–¥—Ü–∞—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫–µ –≤—ã–ø–∞–ª–æ {makeThrow()}")

    @commands.slash_command(name="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–≤–ø–∏", description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –í–ü–ò")
    async def WPG_reg(self, ctx, country_name: Option(str, description="–ò–º—è —Å—Ç—Ä–∞–Ω—ã", required=True) = "Unkown",
                      government: Option(str, description="–§–æ—Ä–º–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è", required=True) = "Unkown",
                      ideology: Option(str, description="–ò–¥–µ–æ–ª–æ–≥–∏—è", required=True) = "Unkown",
                      currency: Option(str, description="–í–∞–ª—é—Ç–∞ —Å—Ç—Ä–∞–Ω—ã. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å —Å–∏–º–≤–æ–ª–æ–º", required=True) = "None",
                      about: Option(str, description="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã", required=True) = "None",
                      flag_url: Option(str, description="URL —Ñ–ª–∞–≥–∞",
                                       required=True) = "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                      other_symbols: Option(str, description="–ü—Ä–æ—á–∞—è —Å–∏–º–≤–æ–ª–∏–∫–∞ —Å—Ç—Ä–∞–Ω—ã", required=True) = "None",
                      ownerdata: Option(str, description="–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", required=True) = "None",
                      id: Option(str, description="ID —Å—Ç—Ä–∞–Ω—ã.", required=True) = "None",
                      user: Option(discord.Member, description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", required=True) = None

                      ):
        with ctx.typing():
            if ctx.author.id in Data.WPG_whitelist:
                if user is None:
                    user = ctx.author
                await ctx.respond(f"–ó–∞–ø–∏—Å—å —Å—Ç—Ä–∞–Ω—ã {country_name}...")
                userid = user.id
                db.countries.insert_one({
                    "userid": userid,
                    "countryname": country_name,
                    "government": government,
                    "ideology": ideology,
                    "currency": currency,
                    "about": about,
                    "flagURL": flag_url,
                    "extraSymbols": other_symbols,
                    "ownerdata": ownerdata,
                    "id": id
                })

                await ctx.respond(f"–°—Ç—Ä–∞–Ω–∞ ``{country_name}`` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{userid}> –∑–∞–ø–∏—Å–∞–Ω–∞ —Å ID ``{id}``!")
            else:
                whitelisted_user_name = " "

                await ctx.respond(
                    f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, <@0000000000000000000>")

    @commands.slash_command(name="—É–¥–∞–ª–µ–Ω–∏–µ-–∞–Ω–∫–µ—Ç—ã-–≤–ø–∏", description="–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É –í–ü–ò")
    async def WPG_unreg(self, ctx,
                        id: Option(str, description="ID —Å—Ç—Ä–∞–Ω—ã.", required=True) = "None",

                        ):
        with ctx.typing():
            if ctx.author.id in Data.WPG_whitelist:
                db.countries.delete_one({"id": id})
                await ctx.respond(f"–°—Ç—Ä–∞–Ω–∞ {id} —É–¥–∞–ª–µ–Ω–∞!")
            else:
                whitelisted_user_name = " "

                await ctx.respond(
                    f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Å—Ç—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, <@{random.choice(Data.WPG_whitelist)}>")

    @commands.slash_command(name="—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å-–≤–ø–∏-—Å—Ç–∞—Ç—ã", description="–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—ã –í–ü–ò –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞")
    async def editWPGStats(self, ctx,
                           id: Option(str, description="ID –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞", choices=choicesEditWPG,
                                      required=True) = "None",
                           field: Option(str, description="–ü–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", required=True, choices=[
                               "–¥–µ–Ω—å–≥–∏", "–ø–æ–ø—É–ª—è—Ü–∏—è", "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è", "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–º–µ–¥–∏—Ü–∏–Ω–∞",
                               "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                               "–∑–∞—â–∏—Ç–∞", "–∞—Ç–∞–∫–∞", "—Ç–æ–ø–ª–∏–≤–æ", "–∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ç–æ–ø–ª–∏–≤–æ", "–º–µ–∂–∑–≤—ë–∑–¥–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ",
                               "–ø—É—Å—Ç–æ—Ç–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∏–Ω–¥–µ–∫—Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", "–µ–¥–∞", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã"

                           ]) = "None",
                           value: Option(int, description="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–º–µ–Ω–∏—Ç—å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è)",
                                         required=True) = 0,
                           ephemeral: Option(bool, description="–í–∏–¥–Ω–æ –ª–∏—à—å –≤–∞–º –∏–ª–∏ –Ω–µ—Ç", required=False) = False):

        if ctx.author.id in Data.WPG_whitelist:
            with ctx.typing():
                column = ""
                if field == "–¥–µ–Ω—å–≥–∏":
                    column = "money"
                elif field == "–ø–æ–ø—É–ª—è—Ü–∏—è":
                    column = "population"
                elif field == "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è":
                    column = "agreement"
                elif field == "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è":
                    column = "area"
                elif field == "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞":
                    column = "infrastructure"
                elif field == "–º–µ–¥–∏—Ü–∏–Ω–∞":
                    column = "medicine"
                elif field == "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
                    column = "eudication"
                elif field == "–∑–∞—â–∏—Ç–∞":
                    column = "armor"
                elif field == "–∞—Ç–∞–∫–∞":
                    column = "attack"
                elif field == "—Ç–æ–ø–ª–∏–≤–æ":
                    column = "fuel"
                elif field == "–∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ç–æ–ø–ª–∏–≤–æ":
                    column = "fuel_space"
                elif field == "–º–µ–∂–∑–≤—ë–∑–¥–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ":
                    column = "fuel_star"
                elif field == "–ø—É—Å—Ç–æ—Ç–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ":
                    column = "fuel_void"
                elif field == "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
                    column = "transport"
                elif field == "–∏–Ω–¥–µ–∫—Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π":
                    column = "tech_index"
                elif field == "–µ–¥–∞":
                    column = "food"
                elif field == "–º–∞—Ç–µ—Ä–∏–∞–ª—ã":
                    column = "materials"
                db.countries.update_one({"id": id}, {"$inc": {column: value}})
                await ctx.respond(f"–ó–Ω–∞—á–µ–Ω–∏–µ ``{field}`` —É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ ``{id}`` –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {value} –µ–¥–µ–Ω–∏—Ü(—É/—ã).",
                                  ephemeral=ephemeral)




        else:
            await ctx.respond(
                f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Å—Ç—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, <@{random.choice(Data.WPG_whitelist)}>",
                ephemeral=ephemeral)

    choisesWPGButWithList = choicesEditWPG
    choisesWPGButWithList.append("list")

    @commands.slash_command(name="—Å—Ç–∞—Ç—ã-–≤–ø–∏", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–ü–ò –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞")
    async def WPG_stats(self, ctx, id: Option(str, description="ID –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞. –ù–µ –≤–≤–æ–¥–∏—Ç–µ –¥–ª—è —Å–ø–∏—Å–∫–∞",
                                              choices=choisesWPGButWithList, required=True) = "list",
                        size: Option(int, description="–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", required=False, choices=[1, 2, 3, 4, 5]) = 1,
                        ephemeral: Option(bool, description="–í–∏–¥–Ω–æ –ª–∏—à—å –≤–∞–º –∏–ª–∏ –Ω–µ—Ç", required=False) = False):
        with ctx.typing():

            if id == "list":
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results = db.countries.find({}, {"userid": 1, "id": 1, "countryname": 1})
                out = ""
                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for row in results:
                    userid = row["userid"]
                    id = row["id"]
                    countryname = row["countryname"]
                    out += f"—Å—Ç—Ä–∞–Ω–∞: **{countryname}** (ID: ``{id}``)  –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç <@{userid}> \n"
                embed = discord.Embed(title="–°—Ç—Ä–∞–Ω—ã", description="–í—Å–µ —Å—Ç—Ä–∞–Ω—ã, –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü—ã –∏ ID —Å—Ç—Ä–∞–Ω",
                                      color=discord.Color.orange())
                embed.add_field(name="–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω", value=f"{out}", inline=False)
                embed.set_footer(text="–î–ª—è —Å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞–Ω—ã –≤–≤–µ–¥–∏—Ç–µ —ç—Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É, –Ω–æ —É–∫–∞–∑–∞–≤ ID —Å—Ç—Ä–∞–Ω—ã")

                await ctx.respond(embed=embed, ephemeral=ephemeral)
            else:
                columns = 17
                imageSizeY = 200
                imageSizeX = columns * 16 + columns * 8 + 16 + 64
                image = Image.new('RGBA', (imageSizeX, imageSizeY), (0, 0, 0, 0))
                bgTileSizeX = 32
                bgTileSizeY = 32
                cell0 = Image.open("graphics/cell.png")

                backgrounds = [None, None, None, None, None]

                cells = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
                for i in range(16):
                    cells[i] = Image.open(f"graphics/cell{i}.png")

                for i in range(5):
                    backgrounds[i] = Image.open(f"graphics/background{i + 1}.png")
                agreement = Image.open("graphics/agreement.png")
                area = Image.open("graphics/area.png")
                armor = Image.open("graphics/armor.png")
                attack = Image.open("graphics/attack.png")

                eudication = Image.open("graphics/eudication.png")
                fuel = Image.open("graphics/fuel.png")
                fuel_space = Image.open("graphics/fuel_space.png")
                fuel_star = Image.open("graphics/fuel_star.png")
                fuel_void = Image.open("graphics/fuel_void.png")
                infrastructure = Image.open("graphics/infrastructure.png")
                medicine = Image.open("graphics/medicine.png")
                money = Image.open("graphics/money.png")
                population = Image.open("graphics/population.png")
                tech = Image.open("graphics/tech.png")
                transport = Image.open("graphics/transport.png")
                materials = Image.open("graphics/materials.png")
                food = Image.open("graphics/food.png")

                result = db.countries.find_one({"id": id}, {"money": 1, "population": 1, "agreement": 1, "area": 1,
                                                            "infrastructure": 1, "medicine": 1, "eudication": 1,
                                                            "attack": 1, "armor": 1, "fuel": 1, "fuel_space": 1,
                                                            "fuel_star": 1, "fuel_void": 1, "transport": 1,
                                                            "tech_index": 1, "materials": 1, "food": 1})

                if result:
                    _money = result.get("money")
                    _population = result.get("population")
                    _agreement = result.get("agreement")
                    _area = result.get("area")
                    _infrastructure = result.get("infrastructure")
                    _medicine = result.get("medicine")
                    _eudication = result.get("eudication")
                    _attack = result.get("attack")
                    _armor = result.get("armor")
                    _fuel = result.get("fuel")
                    _fuel_space = result.get("fuel_space")
                    _fuel_star = result.get("fuel_star")
                    _fuel_void = result.get("fuel_void")
                    _transport = result.get("transport")
                    _tech_index = result.get("tech_index")
                    _materials = result.get("materials")
                    _food = result.get("food")
                arrVal = 0
                if _tech_index / 10 < 5:
                    arrVal = int(_tech_index / 10)
                else:
                    arrVal = 4
                for y in range(int(imageSizeY / bgTileSizeY)):
                    for x in range(int(imageSizeX / bgTileSizeX)):
                        image.paste(backgrounds[arrVal], (x * bgTileSizeX, y * bgTileSizeY))

                def drawBar(barIndex, barPoints, barImage):
                    layersFull = (barPoints // 10)
                    layersNotFull = barPoints % 10
                    posX = (barIndex * 16) + 16 + (8 * barIndex - 1)

                    for i in range(10):
                        image.paste(cells[layersFull], (posX, utils.invertY((i * 8) + 16, imageSizeY)))
                    for i in range(layersNotFull):
                        image.paste(cells[layersFull + 1], (posX, utils.invertY((i * 8) + 16, imageSizeY)))

                    image.paste(barImage, (posX, utils.invertY((10 * 8) + 16 + 16, imageSizeY)))

                # drawBar(1, 11, money)
                # drawBar(2, 9, money)
                drawBar(1, _money, money)
                drawBar(2, _materials, materials)
                drawBar(3, _food, food)
                drawBar(4, _population, population)
                drawBar(5, _agreement, agreement)
                drawBar(6, _area, area)
                drawBar(7, _infrastructure, infrastructure)
                drawBar(8, _medicine, medicine)
                drawBar(9, _eudication, eudication)
                drawBar(10, _attack, attack)
                drawBar(11, _armor, armor)
                drawBar(12, _fuel, fuel)
                drawBar(13, _fuel_space, fuel_space)
                drawBar(14, _fuel_star, fuel_star)
                drawBar(15, _fuel_void, fuel_void)
                drawBar(16, _transport, transport)
                drawBar(17, _tech_index, tech)

                if size > 1:
                    image = image.resize((imageSizeX * size, imageSizeY * size), resample=Image.NEAREST)
                image.save('image_buffer.png')

                modified_image_path = 'image_buffer.png'
                modified_image = discord.File(modified_image_path, filename='image_buffer.png')
                await ctx.respond(file=modified_image, ephemeral=ephemeral)
                # barPoints = 9
                # await ctx.send(f"layersFull: {(barPoints//10)}, layersNotFull: {barPoints%10} –ø—Ä–∏ barPoints: {barPoints}")
                # barPoints = 11
                # await ctx.send(
                #     f"layersFull: {(barPoints // 10)}, layersNotFull: {barPoints % 10} –ø—Ä–∏ barPoints: {barPoints}")

    def makeCharacterPage(self, doc):
        embed = discord.Embed(title=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {utils.formatStringLength(doc['name'], 120)}",
                              description=f"{utils.formatStringLength(doc['bio'], 4000)}",
                              colour=Data.embedColors["Warp"])
        embed.add_field(name="–î–∞–Ω–Ω—ã–µ", value=f"–ê–≤—Ç–æ—Ä: <@{doc['owner']}>\nID: ``{doc['id']}``", inline=False)
        embed.add_field(name="–†–æ—Å—Ç, –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç, –º–∏—Ä", value=f"{doc['bodystats']}\n{doc['age']} –ª–µ—Ç",
                        inline=False)
        embed.add_field(name="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", value=f"{utils.formatStringLength(doc['abilities'], 1024)}",
                        inline=False)
        embed.add_field(name="–°–ª–∞–±–æ—Å—Ç–∏", value=f"{utils.formatStringLength(doc['weaknesses'], 1024)}", inline=False)
        embed.add_field(name="–•–∞—Ä–∞–∫—Ç–µ—Ä", value=f"{utils.formatStringLength(doc['character'], 1024)}", inline=False)
        embed.add_field(name="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", value=f"{utils.formatStringLength(doc['inventory'], 1024)}", inline=False)
        embed.add_field(name="–í–Ω–µ—à–Ω–æ—Å—Ç—å", value=f"{utils.formatStringLength(doc['appearances'], 1024)}",
                        inline=False)
        embed.add_field(name="–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑", value=f"{utils.formatStringLength(doc['shortened'], 1024)}",
                        inline=False)
        arts = str(doc['art']).split(" ")
        thumb = arts[0]

        arts_extra = arts[1:]

        embed.set_thumbnail(url=thumb)
        return (embed, arts_extra)

    async def urls2files(self, urls):
        attachment_urls = urls[:10]
        files = []

        for url in attachment_urls:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        ...
                    data = io.BytesIO(await resp.read())
                    files.append(discord.File(data, f'image.png'))
        return files

    @commands.slash_command(name="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-—Ä–ø", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –†–ü –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ú–∞–∫—Å. 2–∫ —Å–∏–º–≤–æ–ª–æ–≤/–ø–æ–ª–µ")
    async def registerChar(self, ctx, name: Option(str, description="–ò–º—è", required=True) = " ",
                           bodystats: Option(str, description="–í–µ—Å", required=True) = " ",
                           age: Option(float, description="–í–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö)", required=True) = 0,
                           abilities: Option(str, description="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", required=True) = " ",
                           weaknesses: Option(str, description="–°–ª–∞–±–æ—Å—Ç–∏", required=True) = " ",
                           character: Option(str, description="–•–∞—Ä–∞–∫—Ç–µ—Ä", required=True) = " ",
                           inventory: Option(str, description="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", required=True) = " ",
                           bio: Option(str, description="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è. –ú–∞–∫—Å. 4–∫ —Å–∏–º–≤–æ–ª–æ–≤", required=True) = " ",
                           appearances: Option(str, description="–í–Ω–µ—à–Ω–æ—Å—Ç—å", required=True) = " ",
                           art: Option(str, description="–ê—Ä—Ç (URL)",
                                       required=False) = "https://media.discordapp.net/attachments/1018886769619505212/1176561157939662978/ad643992b38e34e2.png",
                           shortened: Option(str, description="–°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑", required=True) = " ",
                           id: Option(str, description="ID", required=True) = " ",
                           owner: Option(discord.Member, description="–í–ª–∞–¥–µ–ª–µ—Ü –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", required=True) = 0):
        doc = {
            "name": name, "bodystats": bodystats, "age": age,
            "abilities": abilities, "weaknesses": weaknesses,
            "character": character, "inventory": inventory, "bio": bio,
            "appearances": appearances, "art": art, "shortened": shortened, "id": id,
            "owner": owner.id}
        sizeLimit = False
        oversizeKey = ""
        for k, v in doc.items():
            # if (len(str(v)) > 2000 and k!="bio") or (len(str(v)) > 4000 and k=="bio"):
            #     oversizeKey=k
            #     sizeLimit = True
            #     break
            if not "http" in art:
                oversizeKey = "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ http(s)://"
                sizeLimit = True
                break
        if db.characters.find_one({"id": id}):
            embed = discord.Embed(title="–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º—ë–Ω!", description=f"ID {id} –∑–∞–Ω—è—Ç –¥—Ä—É–≥–æ–π –∞–Ω–∫–µ—Ç–æ–π!",
                                  colour=Data.embedColors["Error"])
            await ctx.respond(embed=embed)
        else:
            if (await Data.parsePermissionFromUser(ctx.author.id,
                                                   "edit_characters") or await Data.parsePermissionFromUser(
                ctx.author.id, "root")):  # TODO: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–∞–≤
                if not sizeLimit:
                    db.characters.insert_one(doc)
                    embed = discord.Embed(title="–ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
                                          description=f"{name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ``{id}`` –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç <@{owner.id}>\n–¢–∞–∫ –∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 25 –µ–¥–µ–Ω–∏—Ü –æ–ø—ã—Ç–∞.",
                                          colour=Data.embedColors["Success"])
                    await ctx.respond(embed=embed)
                    await Data.addXP(ctx.author.id, 25, ctx.author.name)
                    await Data.addXP(owner.id, 25, owner.name)
                    if art == "https://media.discordapp.net/attachments/1018886769619505212/1176561157939662978/ad643992b38e34e2.png":
                        view = ConfirmGenArt(ctx.author, appearances)
                        await ctx.respond(f"–û–π, –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä—Ç! –ö–∞–∫ –∂–µ –∂–∞–ª—å! –ù—É –Ω–∏—á–µ–≥–æ, —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n"
                                          f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π (–∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {Data.preffix}–∫–∞–Ω–¥–∏–Ω—Å–∫–∏–π)?\n"
                                          f"–ó–∞–ø—Ä–æ—Å: **`{appearances}`**", view=view)

                else:
                    embed = discord.Embed(title="–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!",
                                          description=f"–ö–ª—é—á: {oversizeKey}",
                                          colour=Data.embedColors["Error"])
                    await ctx.respond(embed=embed)
            else:
                embed = discord.Embed(title="–ù–µ—Ç –ø—Ä–∞–≤!",
                                      description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–æ ``edit_characters`` –∏–ª–∏ ``root`` –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
                                      colour=Data.embedColors["Error"])
                await ctx.respond(embed=embed)

    @commands.slash_command(name="–ø–µ—Ä—Å–æ–Ω–∞–∂", description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID")
    async def inspectChar(self, ctx, id: Option(str, description="ID", required=True) = " ",
                          ephemeral: Option(bool, description="–í–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º?", required=False) = False):
        result = db.characters.find_one({"id": id})
        if not result:

            await ctx.respond(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ ``{id}`` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            page = self.makeCharacterPage(result)
            await ctx.respond(embed=page[0], ephemeral=ephemeral, files=await self.urls2files(page[1]))
            # TODO: –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç

    @commands.slash_command(name="–ø–æ–∏—Å–∫-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            description="–ò—â–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
    async def searchChar(self, ctx,
                         member: Option(discord.Member, description="–£ –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", required=True) = 0,
                         ephemeral: Option(bool, description="–í–∏–¥–Ω–æ –ª–∏ —Ç–æ–ª—å–∫–æ –≤–∞–º", required=False) = True):

        documents = db.characters.find({"owner": member.id}, {"name": 1, "id": 1})

        # result = []
        #
        # for doc in documents:
        #     result.append((doc["name"], doc["id"]))

        output = ""

        for doc in documents:
            output += f"- **[{doc['name']}](https://glitchdev.ru/character/{doc['id']})** {'| (***__–ù–ê –ü–†–û–í–ï–†–ö–ï__***) ' if str(doc['id']).endswith('$temp') else ''}| **ID**: ``{doc['id']}``\n"
        if len(output) < 1:
            output = "–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
        embed = discord.Embed(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
                              description=f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{member.id}>:\n{output}",
                              colour=Data.embedColors["Neutral"])
        await ctx.respond(embed=embed, ephemeral=ephemeral)

    @commands.slash_command(name="—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å-–∞–Ω–∫–µ—Ç—É-—Ä–ø", description="–†–ï–î–ê–ö–¢–ò–†–£–ï–¢ –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    async def editCharacter(self, ctx, field: Option(str, description="–ü–æ–ª–µ",
                                                     choices=["name", "bio", "bodystats", "abilities", "weaknesses",
                                                              'character', 'inventory', 'appearances', 'shortened',
                                                              'art'], required=True) = "",
                            value: Option(str, description="–ó–Ω–∞—á–µ–Ω–∏–µ", required=True) = " ",
                            mode: Option(str, description="–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", required=True,
                                         choices=["–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü", "–ó–∞–º–µ–Ω–∏—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å –∫ –Ω–∞—á–∞–ª—É"]) = " ",
                            id: Option(str, description="ID", required=True) = " "
                            ):
        doc = db.characters.find_one({"id": id})
        if not doc:
            embed = discord.Embed(title="–û—à–∏–±–∫–∞!", description="–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", colour=Data.embedColors["Error"])
            await ctx.respond(embed=embed)
            return
        if not (await Data.parsePermissionFromUser(ctx.author.id,
                                                   "edit_characters") or await Data.parsePermissionFromUser(
            ctx.author.id, "root")):  # TODO: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–∞–≤
            embed = discord.Embed(title="–ù–µ—Ç –ø—Ä–∞–≤!",
                                  description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–æ ``edit_characters`` –∏–ª–∏ ``root`` –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
                                  colour=Data.embedColors["Error"])
            await ctx.respond(embed=embed)
            return
        doc_field = doc[field]
        if mode == "–ó–∞–º–µ–Ω–∏—Ç—å":
            doc[field] = value
        elif mode == "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü":
            doc[field] = doc_field + value
        else:
            doc[field] = value + doc_field
        db.characters.update_one({"id": id}, {"$set": doc})
        embed = discord.Embed(title="–£—Å–ø–µ—à–Ω–æ!",
                              description=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è `{field}` —Å —Ä–µ–∂–∏–º–æ–º **`{mode}`** –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                              colour=Data.embedColors["Success"])
        await ctx.respond(embed=embed)

    @commands.slash_command(name="—É–¥–∞–ª–∏—Ç—å-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞", description="–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    async def removeChar(self, ctx, id: Option(str, description="ID", required=True) = " "):
        if await Data.parsePermissionFromUser(ctx.author.id, "root") or await Data.parsePermissionFromUser(
                ctx.author.id, "edit_characters"):
            # view = RemoveCharView(ctx.author, id)  # or ctx.author/message.author where applicable
            # await ctx.response.send_message(view=view)
            db.characters.delete_one({"id": id})
            await ctx.respond(f"–£–¥–∞–ª—ë–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ ``{id}``!")
        else:
            await ctx.respond("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ ``root`` –∏–ª–∏ ``edit_characters`` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!",
                              ephemeral=True)

    @commands.cooldown(1, 60, commands.BucketType.user)
    @commands.message_command(name="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    async def parse_blank(self, ctx, message):

        if len(message.attachments) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            found = False
            for attachment in message.attachments:

                if re.match(r'blank.*\.json', attachment.filename):
                    found = True
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
                    file_contents = await attachment.read()

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –æ–±—ä–µ–∫—Ç JSON

                    try:
                        blank_data = json.loads((await attachment.read()).decode("utf-8"))
                        # –ó–¥–µ—Å—å blank_data –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º JSON —Å –ø–æ–ª—è–º–∏ {"field1":1, "field2":"a", "aaa":["", ""]}
                        # –î–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                        # ...
                        if db.characters.find_one({"id": str(blank_data["id"])}):

                            embed = discord.Embed(title="–ü–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
                                                  description=f"ID {str(blank_data['id'])} —É–∂–µ –∑–∞–Ω—è—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–æ–π!",
                                                  colour=Data.embedColors["Error"])
                            await ctx.respond(embed=embed)
                        elif db.characters.find_one({"id": str(blank_data["id"]) + "$temp"}):
                            embed = discord.Embed(title="–ü–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!",
                                                  description=f"ID {str(blank_data['id']) + '$temp'} —É–∂–µ –∑–∞–Ω—è—Ç –∞–Ω–∫–µ—Ç–æ–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!",
                                                  colour=Data.embedColors["Error"])
                            await ctx.respond(embed=embed)
                        else:
                            id = str(blank_data["id"]) + "$temp"
                            try:
                                age = float(blank_data["age"])
                            except:
                                await ctx.respond("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞!")
                                return
                            doc = {
                                "name": blank_data["name"], "bodystats": blank_data["bodystats"], "age": age,
                                "abilities": blank_data["abilities"], "weaknesses": blank_data["weaknesses"],
                                "character": blank_data["character"], "inventory": blank_data["inventory"],
                                "bio": blank_data["bio"],
                                "appearances": blank_data["appearances"],
                                "art": blank_data["art"] if blank_data["art"] and blank_data["art"] != "" and str(
                                    blank_data["art"]).startswith("http") and blank_data[
                                                                "art"] != " " else "https://media.discordapp.net/attachments/1018886769619505212/1176561157939662978/ad643992b38e34e2.png",
                                "shortened": blank_data["shortened"], "id": str(blank_data["id"]) + "$temp",
                                "owner": ctx.author.id}
                            for k in doc.keys():
                                if not doc[k] or doc[k] == "":
                                    doc[k] = " "
                            # print(doc)
                            embed = discord.Embed(title=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {utils.formatStringLength(doc['name'], 120)}",
                                                  description=f"{utils.formatStringLength(doc['bio'], 4000)}",
                                                  colour=Data.embedColors["Warp"])
                            embed.add_field(name="–î–∞–Ω–Ω—ã–µ", value=f"–ê–≤—Ç–æ—Ä: <@{doc['owner']}>\nID: ``{id}``",
                                            inline=False)
                            embed.add_field(name="–†–æ—Å—Ç, –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç, –º–∏—Ä",
                                            value=f"{doc['bodystats']}\n{doc['age']} –ª–µ—Ç", inline=False)
                            embed.add_field(name="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
                                            value=f"{utils.formatStringLength(doc['abilities'], 1024)}",
                                            inline=False)
                            embed.add_field(name="–°–ª–∞–±–æ—Å—Ç–∏",
                                            value=f"{utils.formatStringLength(doc['weaknesses'], 1024)}",
                                            inline=False)
                            embed.add_field(name="–•–∞—Ä–∞–∫—Ç–µ—Ä",
                                            value=f"{utils.formatStringLength(doc['character'], 1024)}",
                                            inline=False)
                            embed.add_field(name="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                                            value=f"{utils.formatStringLength(doc['inventory'], 1024)}",
                                            inline=False)
                            embed.add_field(name="–í–Ω–µ—à–Ω–æ—Å—Ç—å",
                                            value=f"{utils.formatStringLength(doc['appearances'], 1024)}",
                                            inline=False)
                            embed.add_field(name="–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑",
                                            value=f"{utils.formatStringLength(doc['shortened'], 1024)}",
                                            inline=False)
                            embed.set_thumbnail(url=doc['art'])
                            await ctx.respond(embed=embed)
                            server = self.bot.get_guild(Data.team_server_id)
                            if server is None:
                                found = False
                            else:
                                channel = server.get_channel(Data.blanks_moderation_channel_id)
                                message = f"# –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!!!\n–°–µ—Ä–≤–µ—Ä: {ctx.guild.name} (`{ctx.guild.id}`)\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ctx.author.name} (`{ctx.author.id}`)\n–ö–∞–Ω–∞–ª: {ctx.channel.name} (`{ctx.channel.id}`)"

                                await channel.send(message, embed=embed)
                            db.characters.insert_one(doc)


                    except json.JSONDecodeError:
                        await ctx.respond(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {attachment.filename}!")
                    break
                if not found:
                    await ctx.respond(
                        "–í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–æ blank.json! (–¥–æ–ø—É—Å—Ç–∏–º—ã —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É blank –∏ .json)!")
        else:
            await ctx.respond("–í–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

    @commands.slash_command(name="–æ–¥–æ–±—Ä–∏—Ç—å-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é-—Ä–ø", description="–û–¥–æ–±—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    async def approve_registration(self, ctx, id: Option(str, description="ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–º–æ–∂–Ω–æ –±–µ–∑ $temp, –º–æ–∂–Ω–æ —Å –Ω–∏–º)",
                                                         required=True) = " "):
        hasTemp = str(id).endswith("$temp")
        if hasTemp:
            id_temp = id
            id_notemp = str(id)[:-5]
        else:
            id_temp = id + "$temp"
            id_notemp = id
        if db.characters.find_one({"id": id_temp}):
            if (await Data.parsePermissionFromUser(ctx.author.id,
                                                   "edit_characters") or await Data.parsePermissionFromUser(
                ctx.author.id, "root")):  # TODO: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–∞–≤

                db.characters.update_one({"id": id_temp}, {"$set": {"id": id_notemp}})
                embed = discord.Embed(title="–£—Å–ø–µ—à–Ω–æ!", description=f"–£—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ ``{id_temp}``!",
                                      colour=Data.embedColors["Success"])
                await ctx.respond(embed=embed)

            else:
                embed = discord.Embed(title="–ù–µ—Ç –ø—Ä–∞–≤!",
                                      description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–æ ``edit_characters`` –∏–ª–∏ ``root`` –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
                                      colour=Data.embedColors["Error"])
                await ctx.respond(embed=embed, ephemeral=True)
        else:
            embed = discord.Embed(title="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                  description=f"–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ —Å ID ``{id_temp}`` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                                  colour=Data.embedColors["Error"])
            await ctx.respond(embed=embed,
                              ephemeral=True)  # TODO: –¥–æ–±–∞–≤–∏—Ç—å "–∏—Å–∫—Ä–æ–º—ë—Ç–Ω—É—é" —à—É—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ: "... –¥–∞ –∏ –∫ —Ç–æ–º—É –∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!"

    @commands.slash_command(name="–æ—Ç–∫–ª–æ–Ω–∏—Ç—å-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é-—Ä–ø", description="–û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    async def reject_registration(self, ctx, id: Option(str, description="ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–º–æ–∂–Ω–æ –±–µ–∑ $temp, –º–æ–∂–Ω–æ —Å –Ω–∏–º)",
                                                        required=True) = " "):
        hasTemp = str(id).endswith("$temp")
        if hasTemp:
            id_temp = id
            id_notemp = str(id)[:-5]
        else:
            id_temp = id + "$temp"
            id_notemp = id
        if db.characters.find_one({"id": id_temp}):

            if (await Data.parsePermissionFromUser(ctx.author.id,
                                                   "edit_characters") or await Data.parsePermissionFromUser(
                ctx.author.id, "root")):  # TODO: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–∞–≤

                db.characters.delete_one({"id": id_temp})
                embed = discord.Embed(title="–£—Å–ø–µ—à–Ω–æ!", description=f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ ``{id_temp}``!",
                                      colour=Data.embedColors["Success"])
                await ctx.respond(embed=embed)

            else:
                embed = discord.Embed(title="–ù–µ—Ç –ø—Ä–∞–≤!",
                                      description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–æ ``edit_characters`` –∏–ª–∏ ``root`` –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
                                      colour=Data.embedColors["Error"])
                await ctx.respond(embed=embed, ephemeral=True)
        else:
            embed = discord.Embed(title="–ù–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                  description=f"–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ —Å ID ``{id_temp}`` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                                  colour=Data.embedColors["Error"])
            await ctx.respond(embed=embed,
                              ephemeral=True)  # TODO: –¥–æ–±–∞–≤–∏—Ç—å "–∏—Å–∫—Ä–æ–º—ë—Ç–Ω—É—é" —à—É—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ: "... –¥–∞ –∏ –∫ —Ç–æ–º—É –∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!"

    existing_fields = ["name", "bio", "bodystats", "abilities", "weaknesses",
                       'character', 'inventory', 'appearances', 'shortened',
                       'any']

    @commands.slash_command(name="–ø–æ–∏—Å–∫-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", description="–ò—â–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    async def advancedSearch(self, ctx, field: Option(str, description="–ü–æ–ª–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª—é–±–æ–µ",
                                                      choices=["name", "bio", "bodystats", "abilities", "weaknesses",
                                                               'character', 'inventory', 'appearances', 'shortened',
                                                               'any'], required=False) = "any",
                             query: Option(str, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.", required=True) = "–±–∞–Ω–∞–Ω",
                             use_regex: Option(bool, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å Regex", required=False) = False,
                             ephemeral: Option(bool, description="–í–∏–¥–Ω–æ –ª–∏ —Ç–æ–ª—å–∫–æ –í–∞–º? –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç.",
                                               required=False) = False):
        embed = discord.Embed(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
                              description=f"–ü–æ–ª–µ: `{field}`, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Regex: **{use_regex}**\n–ó–∞–ø—Ä–æ—Å: `{query}`",
                              colour=Data.embedColors["Success"])
        field = field.lower()
        query = re.escape(query) if use_regex else re.escape(query.lower())

        if field not in self.existing_fields:
            await ctx.send("–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ")
            return

        query_dict = {field: {'$regex': query, '$options': 'i'}} if field != 'any' else {
            '$or': [{key: {'$regex': query, '$options': 'i'}} for key in self.existing_fields[:-1]]}

        results = db.characters.find(query_dict).sort('id', pymongo.ASCENDING).limit(10)

        output = []
        for idx, result in enumerate(results):
            matched_fields = ""
            for key, value in result.items():
                match = re.search(query, str(value), re.IGNORECASE)
                if match:
                    start_idx = max(match.start() - 40, 0)
                    end_idx = min(match.end() + 40, len(value))
                    highlighted_value = f"...{value[start_idx:match.start()]}**{match.group()}**{value[match.end():end_idx]}..."
                    matched_fields += (f"`{key}`: {highlighted_value}\n")

            num_matches = len(matched_fields)
            output.append(f"{idx + 1}. ID: {result.get('id')} - Matches: {num_matches}\n" + "\n".join(matched_fields))
            embed.add_field(name=f"{result.get('name')}",
                            value=f"ID: `{result.get('id')}`\n–°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {num_matches}\n–ê–≤—Ç–æ—Ä: <@{result['owner']}> ({Data.getUserNameByID(result['owner'], ctx)})\n"
                                  f"[–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ —Å–∞–π—Ç–µ](https://glitchdev.ru/character/{result.get('id')})\n"
                                  f"--> –°–æ–≤–ø–∞–¥–µ–Ω–∏—è <--\n"
                                  f"{matched_fields}", inline=False)
        if len(output) < 1:
            embed.colour = Data.embedColors["Error"]
            embed.add_field(name="–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π!", value="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", inline=False)
        await ctx.respond(embed=embed, ephemeral=ephemeral)

    @commands.slash_command(name="–∑–∞–¥–∞—Ç—å-–ø—Ä–µ—Ñ—Ñ–∏–∫—Å-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞", description="–ó–∞–¥–∞—ë—Ç –ø—Ä–µ—Ñ—Ñ–∏–∫—Å –ø–µ—Ä—Å–æ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    async def setCharPreffix(self, ctx, prefix: Option(str, description="–ü—Ä–µ—Ñ—Ñ–∏–∫—Å", required=True) = " ",
                             id: Option(str, description="ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", required=True) = ""):
        doc = db.characters.find_one({"id": id})
        if not doc:
            await ctx.respond("–ù–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
            return
        if await Data.parsePermissionFromUser(ctx.author.id, "edit_characters") or await Data.parsePermissionFromUser(
                ctx.author.id, "root") or doc["owner"] == ctx.author.id:
            await ctx.respond(f"–ü—Ä–µ—Ñ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω—ë–Ω: ``{doc['prefix']}`` -> ``{prefix}``")
            db.characters.update_one({"id": id}, {"$set": {"prefix": prefix}})
        else:
            await ctx.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂!", ephemeral=True)

    @commands.Cog.listener("on_message")
    async def interchat_on_message(self, message: discord.Message):
        for doc in db.characters.find({"owner": message.author.id}):
            if not "prefix" in doc.keys():
                return
            if doc["prefix"]:
                if str(message.content).startswith(doc['prefix']):
                    hook = await utils.initWebhook(message.channel, self.bot.user.id)
                    if hook:
                        arts = str(doc['art']).split(" ")
                        havatar = arts[0]
                        hname = doc["name"]
                        content = message.content
                        if content.startswith(doc['prefix']):
                            content = content[len(doc['prefix']):]
                        # if message.reference:
                        #     contentPrefix = f"{message.reference.resolved.content[:30]}...\n" \
                        #                     f""
                        #     if message.reference.resolved.webhook_id:
                        #         ownerdoc = db.characters.find_one({"name":message.reference.resolved.author.name})
                        #         if ownerdoc:
                        #             mention = f" (<@{ownerdoc['owner']}>)"
                        #         else:
                        #             mention = ""
                        #         contentPrefix+=f"{message.reference.resolved.author.name}{mention}"
                        #     else:
                        #         f" (<@{message.reference.resolved.author.id}>)"
                        #     content = f"{contentPrefix}\n{content}"
                        # TODO: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
                        if len(content) < 1:
                            content = "** **"
                        if isinstance(message.channel, discord.Thread):
                            await hook.send(content=content, username=hname,
                                            avatar_url=havatar,
                                            thread=discord.Object(message.channel.parent_id),
                                            files=[await i.to_file() for i in message.attachments]
                                            )

                        else:
                            await hook.send(content=content, username=hname,
                                            avatar_url=havatar,

                                            files=[await i.to_file() for i in message.attachments]
                                            )
                        await message.delete()
                    break

    @commands.cooldown(1, 60, commands.BucketType.user)
    @commands.message_command(name="–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –∞–Ω–∫–µ—Ç—ã")
    async def summarize(self, ctx, message: discord.Message):

        if len(message.content) < 512:
            await ctx.respond("–°–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–∞–∫ –∫–æ—Ä–æ—Ç–∫–æ–µ, –∫—É–¥–∞ –µ—â—ë –∫–æ—Ä–æ—á–µ-—Ç–æ?")
            return
        else:
            # userdoc = d.getUser(ctx.author.id, ctx.author.name)
            # if await Data.parsePermissionFromUser(ctx.author.id, "root") or await Data.parsePermissionFromUser(ctx.author.id, "edit_characters"):
            payload = [{"role": "system",
                        "content": f"–í–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ –∞–Ω–∫–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å. –ü–µ—Ä–µ—Å–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –≤–∫—Ä–∞—Ç—Ü–µ, –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã."
                        },
                       # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ, –ø–µ—Ä–∫—Ä–∞—Ç–∏ –æ—Ç–≤–µ—Ç.
                       {"role": "user", "content": message.content}]
            # print(payload)
            response = await AIIO.askLLM(payload, AIIO.LLMs.GIGACHAT, 3, AIIO.gigachat_temptoken)

            if response == "No token":
                response = await AIIO.askLLM(payload, AIIO.LLMs.GIGACHAT, 3, AIIO.gigachat_temptoken)


            resp = response[0]
            tokens = response[1]['total_tokens']
            tokenInfo = "\n" + f"||–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {tokens} —Ç–æ–∫–µ–Ω{'–æ–≤' if tokens % 100 in (11, 12, 13, 14, 15) else '–∞' if tokens % 10 in (2, 3, 4) else '' if tokens % 10 == 1 else '–æ–≤'}||"
            output = resp + tokenInfo





            outputs = utils.split_string(output, 2000, len(tokenInfo))
            for content in outputs:
                print( "|||", content)

                await ctx.respond(content)
                # print("...")
                #
                # await ctx.send(content)


            # await ctx.respond()
            # else:
            # await ctx.respond("–í—ã –Ω–µ –∞–Ω–∫–µ—Ç–æ–ª–æ–≥.")


def setup(bot):
    bot.add_cog(RP(bot))
